{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","ref","useRef","inputRef","useState","lyrics","setLyrics","artist","setArtist","chosenArtist","setChosenArtist","showClearInput","setShowClearInput","searchResults","setSearchResults","sanitizeStr","str","replace","getSuggestions","search","a","SEARCH_API","fetch","response","json","results","getLyrics","title","cleanTitle","LYRICS_API","handleSuggestionClick","result","name","title_short","then","error","console","log","useEffect","length","buttonClass","type","onChange","e","target","value","data","handleChange","for","className","onClick","current","focus","aria-label","preventDefault","clearField","tabIndex","aria-expanded","map","index","key","uuidv4","onKeyDown","parentNode","firstChild","handleKeyDown","alt","src","picture","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bf5ad82a.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport { v4 as uuidv4 } from 'uuid'\nimport './styles.scss'\n\nexport default function App() {\n  const ref = useRef(null)\n  const inputRef = useRef(null)\n  const [lyrics, setLyrics] = useState()\n  const [artist, setArtist] = useState(null)\n  const [chosenArtist, setChosenArtist] = useState('')\n  const [showClearInput, setShowClearInput] = useState(false)\n  const [searchResults, setSearchResults] = useState([])\n  const errorMessage = 'Sorry we could not find these lyrics'\n\n  //Replace space with accepted characters\n  const sanitizeStr = str => str.replace(/\\s/, '%20')\n\n  const getSuggestions = async search => {\n    sanitizeStr(search)\n    const SEARCH_API = `https://api.lyrics.ovh/suggest/${search}`\n\n    const response = await fetch(SEARCH_API)\n    const results = await response.json()\n\n    return results\n  }\n\n  const getLyrics = async (artist, title) => {\n    const [cleanArtist, cleanTitle] = [sanitizeStr(artist), sanitizeStr(title)]\n    const LYRICS_API = `https://api.lyrics.ovh/v1/${cleanArtist}/${cleanTitle}`\n\n    const response = await fetch(LYRICS_API)\n    const lyrics = await response.json()\n\n    return lyrics\n  }\n\n  const handleChange = e => {\n    const search = e.target.value\n    setChosenArtist(search)\n    setShowClearInput(true)\n    // when we have at least 3 characters typed in by user, start searching\n    if (search.length > 2) {\n      getSuggestions(search).then(({ error, data: results }) => {\n        results && setSearchResults(results)\n        error && console.log('boom error fetching suggestions -> ', error)\n      })\n    } else setSearchResults([])\n  }\n\n  const handleSuggestionClick = result => {\n    setChosenArtist(\n      `${result.artist.name} - ${\n        result.title_short ? result.title_short : result.title\n      }`\n    )\n    getLyrics(\n      result.artist.name,\n      // TODO: Test which is better btw title and title_short\n      result.title_short ? result.title_short : result.title\n    ).then(({ lyrics, error }) => {\n      lyrics ? setLyrics(lyrics) : setLyrics(errorMessage)\n      error && console.log('boom error fetching lyrics ->', error)\n      setSearchResults([])\n    })\n    result.artist && setArtist(result.artist)\n  }\n\n  const handleKeyDown = (e, index, result) => {\n    e.key === 'Enter' && handleSuggestionClick(result)\n    e.key === 'Tab' &&\n      index + 1 === searchResults.length &&\n      ref.current.parentNode.firstChild.focus()\n  }\n\n  const clearField = e => {\n    e.preventDefault()\n    setChosenArtist('')\n    setSearchResults([])\n  }\n\n  useEffect(() => {\n    chosenArtist.length === 0 && setShowClearInput(false)\n  }, [chosenArtist])\n\n  const buttonClass = `clear-field ${showClearInput && 'visible'}`\n\n  return (\n    <>\n      <h1>Lyrics finder</h1>\n      <section>\n        <form>\n          <input\n            ref={inputRef}\n            type=\"text\"\n            name=\"searchInput\"\n            onChange={e => handleChange(e)}\n            value={chosenArtist}\n          />\n          <label for=\"searchInput\" className={chosenArtist !== '' && \"focused\"} onClick={() => inputRef.current.focus()}>\n            Search for an artist / song\n          </label>\n          <button aria-label=\"clear search field\" onClick={e => clearField(e)} className={buttonClass}></button>\n        </form>\n        <ul tabIndex=\"-1\" aria-expanded={!!searchResults?.length > 0}>\n          {searchResults?.map((result, index) => {\n            return (\n              <li\n                ref={ref}\n                key={uuidv4()}\n                tabIndex={0}\n                onClick={e => handleSuggestionClick(result)}\n                onKeyDown={e => handleKeyDown(e, index, result)}\n              >\n                {result.artist.name} -{' '}\n                {result.title_short ? result.title_short : result.title}\n              </li>\n            )\n          })}\n        </ul>\n      </section>\n      {artist && lyrics && (\n        <img\n          alt=\"artist poster\"\n          src={artist.picture.replace('http', 'https')}\n        />\n      )}\n      <pre>{lyrics}</pre>\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}